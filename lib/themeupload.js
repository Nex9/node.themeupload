// Generated by CoffeeScript 1.10.0
(function() {
  var ThemeUpload, Upload, YAML, defer, fs, hash, mime, promiseall, promisewhen, restler, walk,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  fs = require("fs");

  restler = require("restler");

  walk = require("walkdir");

  YAML = require("js-yaml");

  mime = require("mime");

  hash = require("mhash");

  console.log(hash);

  defer = require("node-promise").defer;

  promisewhen = require("node-promise").when;

  promiseall = require("node-promise").all;

  Upload = (function() {
    function Upload(inpath) {
      this.cleanup = bind(this.cleanup, this);
      this.flushCache = bind(this.flushCache, this);
      this.pathFilter = bind(this.pathFilter, this);
      this.parseYaml = bind(this.parseYaml, this);
      this.inpath = inpath;
      this.opts = {};
      this.exclude = ['theme.yaml', 'index.html'];
      this.domain = '';
      this.version = null;
      this.totalfiles = 0;
      this.callcounter = 0;
      console.log('this inpath', this.inpath);
      this.run();
    }

    Upload.prototype.run = function() {
      console.log('getting configuration...');
      this.parseYaml();
      this.getDomain();
      console.log('domain is', this.domain);
      return this.getNextVersion();
    };

    Upload.prototype.gaeVersion = function() {
      if (this.opts.gaeversion === 'default') {
        return '';
      }
      return '.' + this.opts.gaeversion;
    };

    Upload.prototype.getDomain = function() {
      this.domain = 'http://' + this.opts.tenant + this.gaeVersion() + '.nex9-99.appspot.com';
      if (this.opts.debug) {
        return this.domain = 'http://localhost:8080';
      }
    };

    Upload.prototype.parseYaml = function() {
      var yamlPath;
      yamlPath = this.inpath + '/theme.yaml';
      if (!fs.existsSync(yamlPath)) {
        process.kill();
      }
      this.opts = YAML.safeLoad(fs.readFileSync(yamlPath, 'utf8'));
      return console.log('yamlPath', yamlPath, '@opts', this.opts);
    };

    Upload.prototype.getNextVersion = function() {
      var getNextDone, url;
      getNextDone = (function(_this) {
        return function(data) {
          _this.version = parseInt(data);
          console.log('themeversion is', _this.version);
          return _this.walkFiles();
        };
      })(this);
      url = this.domain + '/api/v2/themeupload/next';
      return restler.get(url).on('complete', getNextDone);
    };

    Upload.prototype.pathFilter = function(path) {
      var fname;
      fname = path.split('/')[path.split('/').length - 1];
      if (fs.lstatSync(path).isDirectory()) {
        return false;
      }
      if (indexOf.call(this.exclude, fname) >= 0) {
        return false;
      }
      if (fname.indexOf('.') === 0) {
        return false;
      }
      return true;
    };

    Upload.prototype.walkFiles = function() {
      var filepath, objs, paths;
      paths = walk.sync(this.inpath);
      paths = paths.filter(this.pathFilter);
      this.totalfiles = paths.length;
      this.callcounter = this.totalfiles;
      console.log('starting deployment for', this.totalfiles, 'files');
      objs = (function() {
        var i, len, results;
        results = [];
        for (i = 0, len = paths.length; i < len; i++) {
          filepath = paths[i];
          results.push(this.uploadFile(filepath));
        }
        return results;
      }).call(this);
      return promisewhen(promiseall(objs), this.cleanup);
    };

    Upload.prototype.flushCache = function() {
      var data, url;
      console.log('flushing the cache');
      data = {
        data: {
          key: 'UWSMJGaPRcAmgXbNjOhHYrT2VzIkufKqy9eptsExCQnFD'
        }
      };
      url = this.domain + '/api/flushcache';
      return restler.post(url, data).on('complete', function(data, response) {
        return console.log('deployment done!');
      });
    };

    Upload.prototype.cleanup = function() {
      var url;
      console.log('done uploading files...');
      if (this.opts.setdefault) {
        console.log('going to set the default version to', this.version);
        url = this.domain + '/api/v2/themeupload/setdefault/' + this.version;
        return restler.get(url).on('complete', this.flushCache);
      } else {
        return this.flushCache();
      }
    };

    Upload.prototype.uploadFile = function(filepath) {
      var deferred, filedata, mimetype, postData, serving_path, uploadBinary;
      deferred = new defer();
      uploadBinary = (function(_this) {
        return function(body) {
          var data, stats;
          stats = fs.statSync(filepath);
          data = {
            multipart: true,
            data: {
              file: restler.file(filepath, null, stats.size, null, mimetype)
            }
          };
          console.log('uploading ->', serving_path);
          return restler.post(body, data).on('complete', function(data, response) {
            return deferred.resolve();
          });
        };
      })(this);
      postData = (function(_this) {
        return function(filedata) {
          var payload, url;
          url = _this.domain + '/api/v2/themeupload/uploadurl';
          payload = JSON.stringify(filedata);
          return restler.post(url, {
            data: payload
          }).on('complete', uploadBinary);
        };
      })(this);
      serving_path = filepath.split('/public')[1];
      mimetype = mime.lookup(serving_path);
      filedata = {
        path: serving_path,
        mimetype: mimetype,
        version: this.version,
        sha: 0
      };
      fs.readFile(filepath, function(err, data) {
        filedata.sha = hash('sha224', data);
        return postData(filedata);
      });
      return deferred.promise;
    };

    return Upload;

  })();

  ThemeUpload = (function() {
    function ThemeUpload() {}

    ThemeUpload.prototype.exec = function() {
      var args, path;
      args = process.argv;
      if (args.length !== 3) {
        if (args.length === 2) {
          console.log('the command must be called with path as an argument');
          return;
        } else if (args.length > 3) {
          console.log('too many arguments');
          return;
        }
      }
      path = args[args.length - 1];
      if (fs.existsSync(path) && fs.existsSync(path + '/public')) {
        return new Upload(path + '/public');
      } else {
        return console.log('fuck');
      }
    };

    return ThemeUpload;

  })();

  module.exports = ThemeUpload;

}).call(this);
