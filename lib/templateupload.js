// Generated by CoffeeScript 1.9.1
(function() {
  var TemplateUpload, Upload, YAML, async, fs, pathMod, request, restler, sass, walk,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  fs = require("fs");

  restler = require("restler");

  request = require("request");

  walk = require("walkdir");

  YAML = require("libyaml");

  sass = require("node-sass");

  pathMod = require("path");

  async = require("async");

  Upload = (function() {
    function Upload(inpath) {
      this.pathFilter = bind(this.pathFilter, this);
      this.parseYaml = bind(this.parseYaml, this);
      this.inpath = inpath;
      this.opts = {};
      this.domain = '';
      console.log('this inpath', this.inpath);
      this.run();
    }

    Upload.prototype.run = function() {
      console.log('getting configuration...');
      this.parseYaml();
      this.getDomain();
      return this.walkFiles();
    };

    Upload.prototype.getDomain = function() {
      this.domain = "https://api.imago.io";
      if (this.opts.debug) {
        return this.domain = 'http://localhost:8000';
      }
    };

    Upload.prototype.parseYaml = function() {
      var yamlPath;
      yamlPath = this.inpath + '/public/theme.yaml';
      if (!fs.existsSync(yamlPath)) {
        process.kill();
      }
      return this.opts = YAML.readFileSync(yamlPath)[0];
    };

    Upload.prototype.pathFilter = function(path) {
      var fname;
      fname = path.split('/')[path.split('/').length - 1];
      if (fs.lstatSync(path).isDirectory()) {
        return false;
      }
      if (fname.match(/.+\.sass$|.+\.css$/)) {
        return false;
      }
      if (fname.indexOf('.') === 0) {
        return false;
      }
      return true;
    };

    Upload.prototype.postTemplates = function(templateObj, cb) {
      var endpoint, opts;
      endpoint = this.domain + "/v1/templates";
      opts = {
        headers: {
          Authorization: "Basic " + (new Buffer(this.opts.apikey + ":").toString('base64'))
        }
      };
      return restler.postJson(endpoint, templateObj, opts).on('complete', function(data, response) {
        if (response.statusCode !== 200) {
          console.log('Error', data, 'statusCode:', response.statusCode, 'for file', templateObj.name);
          return cb();
        } else {
          console.log(templateObj.name, 'done...');
          return cb();
        }
      });
    };

    Upload.prototype.walkFiles = function() {
      var _this, paths;
      paths = walk.sync(this.inpath + '/templates');
      paths = paths.filter(this.pathFilter);
      _this = this;
      return async.eachLimit(paths, 10, (function(_this) {
        return function(path, cb) {
          var basename, filename, templateObj;
          basename = pathMod.basename(path);
          filename = basename.match(/(.*)\.jade/)[1];
          templateObj = {
            jade: '',
            css: '',
            name: basename
          };
          return fs.readFile(path, function(err, data) {
            var opts, stylepath;
            templateObj.jade = data.toString();
            stylepath = path.replace('.jade', '.sass');
            opts = {
              file: stylepath,
              outputStyle: 'compressed'
            };
            return sass.render(opts, function(err, css) {
              templateObj.css = (css != null ? css.css.toString() : void 0) || '';
              return _this.postTemplates(templateObj, cb);
            });
          });
        };
      })(this), (function(_this) {
        return function(err) {
          return console.log('done uploading templates...');
        };
      })(this));
    };

    return Upload;

  })();

  TemplateUpload = (function() {
    function TemplateUpload() {}

    TemplateUpload.prototype.exec = function() {
      var args, path;
      args = process.argv;
      if (args.length !== 3) {
        if (args.length === 2) {
          console.log('the command must be called with path as an argument');
          return;
        } else if (args.length > 3) {
          console.log('too many arguments');
          return;
        }
      }
      path = args[args.length - 1];
      if (fs.existsSync(path) && fs.existsSync(path + '/templates')) {
        return new Upload(path);
      } else {
        return console.log('fuck');
      }
    };

    return TemplateUpload;

  })();

  module.exports = TemplateUpload;

}).call(this);

//# sourceMappingURL=templateupload.js.map
